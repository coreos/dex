syntax = "proto3";
option java_package = "com.coreos.dex.api";

package api;

// Client represents an OAuth2 client.
message Client {
  string id = 1;
  string secret = 2;
  repeated string redirect_uris = 3;
  repeated string trusted_peers = 4;
  bool public = 5;
  string name = 6;
  string logo_url = 7;
}

// CreateClientReq is a request to make a client.
message CreateClientReq {
  Client client = 1;
}

// CreateClientResp returns the response from creating a client.
message CreateClientResp {
  bool already_exists = 1;
  Client client = 2; 
}

// DeleteClientReq is a request to delete a client.
message DeleteClientReq {
  // The ID of the client.
  string id = 1;
}

// DeleteClientResp determines if the client is deleted successfully. 
message DeleteClientResp {
  bool not_found = 1;
}

// UpdateClientReq is a request to update an existing client.
message UpdateClientReq {
    string id = 1;
    repeated string redirect_uris = 2;
    repeated string trusted_peers = 3;
    string name = 4;
    string logo_url = 5;
}

// UpdateClientResp returns the response from updating a client.
message UpdateClientResp {
    bool not_found = 1;
}

// TODO(ericchiang): expand this.

// Password is an email for password mapping managed by the storage.
message Password {
  string email = 1;

  // Currently we do not accept plain text passwords. Could be an option in the future.
  bytes hash = 2;
  string username = 3;
  string user_id = 4;
}

// CreatePasswordReq is a request to make a password.
message CreatePasswordReq {
  Password password = 1;
}

// CreatePasswordResp returns the response from creating a password.
message CreatePasswordResp {
  bool already_exists = 1;
}

// UpdatePasswordReq is a request to modify an existing password.
message UpdatePasswordReq {
  // The email used to lookup the password. This field cannot be modified
  string email = 1;
  bytes new_hash = 2;
  string new_username = 3;
}

// UpdatePasswordResp returns the response from modifying an existing password. 
message UpdatePasswordResp {
  bool not_found = 1;
}

// DeletePasswordReq is a request to delete a password.
message DeletePasswordReq {
  string email = 1;
}

// DeletePasswordResp returns the response from deleting a password. 
message DeletePasswordResp {
  bool not_found = 1;
}

// ListPasswordReq is a request to enumerate passwords.
message ListPasswordReq {}

// ListPasswordResp returns a list of passwords.
message ListPasswordResp {
  repeated Password passwords = 1;
}

// VersionReq is a request to fetch version info.
message VersionReq {}

// VersionResp holds the version info of components.
message VersionResp {
  // Semantic version of the server.
  string server = 1;
  // Numeric version of the API. It increases everytime a new call is added to the API.
  // Clients should use this info to determine if the server supports specific features.
  int32 api = 2;
}

// RefreshTokenRef contains the metadata for a refresh token that is managed by the storage.
message RefreshTokenRef {
  // ID of the refresh token.
  string id = 1;
  string client_id = 2;
  int64 created_at = 5;
  int64 last_used = 6;
}

// ListRefreshReq is a request to enumerate the refresh tokens of a user.
message ListRefreshReq {
  // The "sub" claim returned in the ID Token.
  string user_id = 1;
}

// ListRefreshResp returns a list of refresh tokens for a user.
message ListRefreshResp {
  repeated RefreshTokenRef refresh_tokens = 1;
}

// RevokeRefreshReq is a request to revoke the refresh token of the user-client pair.
message RevokeRefreshReq {
  // The "sub" claim returned in the ID Token.
  string user_id = 1;
  string client_id = 2;
}

// RevokeRefreshResp determines if the refresh token is revoked successfully. 
message RevokeRefreshResp {
  // Set to true is refresh token was not found and token could not be revoked.
  bool not_found = 1;
}

message VerifyPasswordReq {
  string email = 1;
  string password = 2;
}

message VerifyPasswordResp {
  bool verified = 1;
  bool not_found = 2;
}

// UserIdp represents the ID of the user from an idp
message UserIdp {
  string idp_id = 1;
  string intern_id = 2;
}

// CreateUserIdpReq is a request to make a UserIdp.
message CreateUserIdpReq {
  UserIdp user_idp = 1;
}

// CreateUserIdpResp returns the response from creating a UserIdp.
message CreateUserIdpResp {
  bool already_exists = 1;
  UserIdp user_idp = 2; 
}

// DeleteUserIdpReq is a request to delete a UserIdp.
message DeleteUserIdpReq {
  // The ID of the UserIdp.
  string idp_id = 1;
}

// DeleteUserIdpResp determines if the UserIdp is deleted successfully. 
message DeleteUserIdpResp {
  bool not_found = 1;
}

// UpdateUserIdpReq is a request to update an exisitng UserIdp.
message UpdateUserIdpReq {
    string idp_id = 1;
    string intern_id = 2;
}

// UpdateUserIdpResp returns the reponse form updating a UserIdp.
message UpdateUserIdpResp {
    bool not_found = 1;
}

// ListUserIdpReq is a request to enumerate UserIdp.
message ListUserIdpReq {}

// ListUserIdpResp returns a list of UserIdp.
message ListUserIdpResp {
  repeated UserIdp user_idps = 1;
}

// User represents the User into Dex 
message User {
  string intern_id = 1;
  string pseudo = 2;
  string email = 3;
  repeated string acl_tokens = 4;
}

// CreateUserReq is a request to make a User.
message CreateUserReq {
  User user = 1;
}

// CreateUserResp returns the response from creating a User.
message CreateUserResp {
  bool already_exists = 1;
  User user = 2; 
}

// DeleteUserReq is a request to delete a User.
message DeleteUserReq {
  // The ID of the User.
  string intern_id = 1;
}

// DeleteUserResp determines if the User is deleted successfully. 
message DeleteUserResp {
  bool not_found = 1;
}

// UpdateUserReq is a request to update an exisitng User.
message UpdateUserReq {
    string intern_id = 1;
    string pseudo = 2;
    string email = 3;
    repeated string acl_tokens = 4;
}

// UpdateUserResp returns the reponse form updating a User.
message UpdateUserResp {
    bool not_found = 1;
}

// ListUserReq is a request to enumerate User.
message ListUserReq {}

// ListUserResp returns a list of User.
message ListUserResp {
  repeated User users = 1;
}

// AclToken represents the AclToken into Dex 
message AclToken {
  string id = 1;
  string desc = 2;
  string max_user = 3;
  repeated string client_tokens = 4;
}

// CreateAclTokenReq is a request to make a AclToken.
message CreateAclTokenReq {
  AclToken acl_token = 1;
}

// CreateAclTokenResp returns the response from creating a AclToken.
message CreateAclTokenResp {
  bool already_exists = 1;
  AclToken acl_token = 2; 
}

// DeleteAclTokenReq is a request to delete a AclToken.
message DeleteAclTokenReq {
  // The ID of the User.
  string id = 1;
}

// DeleteAclTokenResp determines if the AclToken is deleted successfully. 
message DeleteAclTokenResp {
  bool not_found = 1;
}

// UpdateAclTokenReq is a request to update an exisitng AclToken.
message UpdateAclTokenReq {
    string id = 1;
    string desc = 2;
    string max_user = 3;
    repeated string client_tokens = 4;
}

// UpdateAclTokenResp returns the reponse form updating a AclToken.
message UpdateAclTokenResp {
    bool not_found = 1;
}

// ListAclTokenReq is a request to enumerate AclToken.
message ListAclTokenReq {}

// ListAclTokenResp returns a list of AclToken.
message ListAclTokenResp {
  repeated AclToken acl_tokens = 1;
}

// ClientToken represents the ClientToken into Dex 
message ClientToken {
  string id = 1;
  string client_id = 2;
  int64 created_at = 3;
  int64 expired_at = 4;
}

// CreateClientTokenReq is a request to make a ClientToken.
message CreateClientTokenReq {
  ClientToken client_token = 1;
}

// CreateClientTokenResp returns the response from creating a ClientToken.
message CreateClientTokenResp {
  bool already_exists = 1;
  ClientToken client_token = 2; 
}

// DeleteClientTokenReq is a request to delete a ClientToken.
message DeleteClientTokenReq {
  // The ID of the ClientToken.
  string id = 1;
}

// DeleteClientTokenResp determines if the ClientToken is deleted successfully. 
message DeleteClientTokenResp {
  bool not_found = 1;
}

// UpdateClientTokenReq is a request to update an exisitng ClientToken.
message UpdateClientTokenReq {
    string id = 1;
    string client_id = 2;
    int64 created_at = 3;
    int64 expired_at = 4;
}

// UpdateClientTokenResp returns the reponse form updating a ClientToken.
message UpdateClientTokenResp {
    bool not_found = 1;
}

// ListClientTokenReq is a request to enumerate ClientToken.
message ListClientTokenReq {}

// ListClientTokenResp returns a list of ClientToken.
message ListClientTokenResp {
  repeated ClientToken client_tokens = 1;
}

// Dex represents the dex gRPC service.
service Dex {
  // CreateClient creates a client.
  rpc CreateClient(CreateClientReq) returns (CreateClientResp) {};
  // UpdateClient updates an existing client
  rpc UpdateClient(UpdateClientReq) returns (UpdateClientResp) {};
  // DeleteClient deletes the provided client.
  rpc DeleteClient(DeleteClientReq) returns (DeleteClientResp) {};
  // CreatePassword creates a password.
  rpc CreatePassword(CreatePasswordReq) returns (CreatePasswordResp) {};
  // UpdatePassword modifies existing password.
  rpc UpdatePassword(UpdatePasswordReq) returns (UpdatePasswordResp) {};
  // DeletePassword deletes the password.
  rpc DeletePassword(DeletePasswordReq) returns (DeletePasswordResp) {};
  // ListPassword lists all password entries.
  rpc ListPasswords(ListPasswordReq) returns (ListPasswordResp) {};
  // GetVersion returns version information of the server.
  rpc GetVersion(VersionReq) returns (VersionResp) {};
  // ListRefresh lists all the refresh token entries for a particular user.
  rpc ListRefresh(ListRefreshReq) returns (ListRefreshResp) {};
  // RevokeRefresh revokes the refresh token for the provided user-client pair.
  //
  // Note that each user-client pair can have only one refresh token at a time.
  rpc RevokeRefresh(RevokeRefreshReq) returns (RevokeRefreshResp) {};
  // VerifyPassword returns whether a password matches a hash for a specific email or not.
  rpc VerifyPassword(VerifyPasswordReq) returns (VerifyPasswordResp) {};

  // CreateUserIdp creates a UserIdp.
  rpc CreateUserIdp(CreateUserIdpReq) returns (CreateUserIdpResp) {};
  // UpdateUserIdp updates an existing UserIdp
  rpc UpdateUserIdp(UpdateUserIdpReq) returns (UpdateUserIdpResp) {};
  // ListUserIdp lists all existings UserIdp
  rpc ListUserIdp(ListUserIdpReq) returns (ListUserIdpResp) {};
  // DeleteUserIdp deletes the provided UserIdp.
  rpc DeleteUserIdp(DeleteUserIdpReq) returns (DeleteUserIdpResp) {};

  // CreateUser creates a User.
  rpc CreateUser(CreateUserReq) returns (CreateUserResp) {};
  // UpdateUser updates an existing User
  rpc UpdateUser(UpdateUserReq) returns (UpdateUserResp) {};
  // ListUser lists all existings User
  rpc ListUser(ListUserReq) returns (ListUserResp) {};
  // DeleteUser deletes the provided User.
  rpc DeleteUser(DeleteUserReq) returns (DeleteUserResp) {};

  // CreateAclToken creates a AclToken.
  rpc CreateAclToken(CreateAclTokenReq) returns (CreateAclTokenResp) {};
  // UpdateAclToken updates an existing AclToken
  rpc UpdateAclToken(UpdateAclTokenReq) returns (UpdateAclTokenResp) {};
  // ListAclToken lists all existings AclToken
  rpc ListAclToken(ListAclTokenReq) returns (ListAclTokenResp) {};
  // DeleteAclToken deletes the provided AclToken.
  rpc DeleteAclToken(DeleteAclTokenReq) returns (DeleteAclTokenResp) {};

  // CreateClientToken creates a ClientToken.
  rpc CreateClientToken(CreateClientTokenReq) returns (CreateClientTokenResp) {};
  // UpdateClientToken updates an existing ClientToken
  rpc UpdateClientToken(UpdateClientTokenReq) returns (UpdateClientTokenResp) {};
  // ListClientToken lists all existings ClientToken
  rpc ListClientToken(ListClientTokenReq) returns (ListClientTokenResp) {};
  // DeleteClientToken deletes the provided ClientToken.
  rpc DeleteClientToken(DeleteClientTokenReq) returns (DeleteClientTokenResp) {};
}
